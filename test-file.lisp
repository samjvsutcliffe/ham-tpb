(load "tpb.lisp")
;; (uiop:quit)
;; (in-package :cl-mpm/examples/slump)
;; (mpi-main-loop)
;(mpi-run 1)
;; (ql:quickload :cl-mpm/examples/slump)
;(setf lparallel:*kernel* (lparallel:make-kernel 16))

;; (lfarm:broadcast-task
;;  (lambda ()
;;    (let ((rank (cl-mpi:mpi-comm-rank)))
;;      (format t "Running ~D~%" (cl-mpi::mpi-comm-rank))
;;      )))

;; (cl-mpm/mpi::collect-servers 2)
;; (lfarm:broadcast-task
;;  (lambda()
;;    (load "test-package.lisp")
;;    (in-package :cl-mpm/examples/slump)
;;    (mpi-main-loop)))
;; (defparameter *sim* nil)
;; (lfarm:broadcast-task
;;  (lambda ()
;;    (load "test-package.lisp")
;;    (in-package :cl-mpm/examples/slump)
;;    (let ((rank (cl-mpi:mpi-comm-rank)))
;;      (format t "Setup~%")
;;      (setup 'cl-mpm/mpi::mpm-sim-mpi-stress)
;;      (format t "Decompose~%")
;;      (print *sim*)
;;      (cl-mpm/mpi::domain-decompose *sim*)
;;      (format t "Sim MPs: ~a~%" (length (cl-mpm:sim-mps *sim*)))
;;      ;; (format t "Run~%")
;;      ;; (dotimes (step 1)
;;      ;;   (format t "rank ~D - Update step ~D" rank step)
;;      ;;   ;; (cl-mpm::update-sim *sim*)
;;      ;;   ;; (when (= (cl-mpi::mpi-comm-rank) 0)
;;      ;;   ;;   (plot *sim* :rank))
;;      ;;   ;; )
;;      ;;   )
;;      (format t "rank: ~D Finished~%" rank))
;;    ))
;; (lfarm:broadcast-task
;;  (lambda ()
;;    (let ((rank (cl-mpi:mpi-comm-rank)))
;;      (cl-mpm/mpi::domain-decompose *sim*)
;;      (format t "rank: ~D Finished~%" rank))
;;    ))
